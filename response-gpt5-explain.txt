Duration: 31.447 seconds.

Code generated:
这段代码实现了两个功能：

1) ascending 比较函数
- 作用：按“升序”比较两个值 a 和 b，并返回一个三态比较结果。
- 返回值语义：
  - -1：a < b
  - 1：a > b
  - 0：a 与 b 视为“相等或不小于”（覆盖了相等的情况，也会覆盖某些类型转换后相等的情况，如 "2" 与 2）
  - NaN：无法比较的情况（如 a 或 b 为 null/undefined，或其中有 NaN）
- 细节：
  - 使用 a == null 或 b == null 来同时捕获 null 和 undefined。
  - 当有 NaN 时，a < b、a > b、a >= b 都为 false，最终返回 NaN。
  - 对字符串、数字、Date（可转为数值）都能工作；Symbol 会在比较阶段抛错（JS 规则）。

2) bisectLeft 二分查找（左侧插入点）
- 作用：在有序数组 a 中，用二分查找找到值 x 的“左侧插入位置”（leftmost insertion point），即保持升序的前提下，x 应该插在最靠左的哪个下标。
- 参数：
  - a：已按升序排列的数组
  - x：要插入/查找的值
  - lo：搜索起始下标，默认 0
  - hi：搜索结束下标（开区间），默认 a.length
- 返回：一个索引 i，使得
  - 对所有 j < i，a[j] < x
  - 对所有 j >= i，a[j] >= x
  - 换言之，这是第一个使 a[i] 不小于 x 的位置（左侧插入点）。
- 实现逻辑：
  - 使用 while (lo < hi) 的标准二分模板。
  - mid = (lo + hi) >>> 1 等价于向下取整的中点（利用无符号右移 1 位来快速 floor）。
  - 若 ascending(a[mid], x) < 0（即 a[mid] < x），则 lo = mid + 1；否则 hi = mid。
  - 循环结束返回 lo。
- 复杂度：O(log n) 时间，O(1) 额外空间。
- 关于 NaN/null 的处理：
  - ascending 返回 NaN 时，判断 NaN < 0 为 false，所以会走 hi = mid 分支，将搜索区间往左收缩。
  - 因此，数组中若存在 NaN、null、undefined 等不可比较项，插入位置会被放在这些项之前（更靠左）。

示例
- bisectLeft([1, 3, 3, 5], 3) -> 1（插在第一个 3 的左边）
- bisectLeft([1, 2, 3], 4) -> 3（插到末尾）
- bisectLeft([1, 2, 3], 0) -> 0（插到开头）
- bisectLeft([1, 2, NaN, 4], 3) -> 2（插在 NaN 前）
- bisectLeft(['a', 'b', 'b', 'c'], 'b') -> 1

常见用途
- 在有序数组中查找插入位置（保持有序）
- 实现去重时的定位
- 统计分位数、直方图分箱、时间序列插入等需要快速定位的场景

备注
- 这相当于“左侧二分”。若需要“右侧二分”（在相等元素之后插入），判断条件通常会改成 <= 0。

